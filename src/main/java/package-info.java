/*
 * Singleton:   применён - реализовал для класса Controller. Посчитал логичным, т.к. нет смысла в большом количестве экземпляров этого класса, т.к. все они были бы идентичны,  и выполняли бы одну и ту же важную функцию - запуск программы.
 * Factory:     применён - класс PersonFactory: много логики сопутствующей созданию объекта класса Person.
 * Builder:     применён - внедрил для инициализации причёски(Hair) в AppearanceGenerator, так как инициализации причёски предполагает некоторую логику в выборе длины, и поэтапное создание с использованием Fluent Interface выглядит хорошим и лаконичным решением.
 * Adapter:     применён - класс FioGeneratorAdapter: класс FioGenerator не имплементирует интерфейс Generator, что нелогично на мой взгляд. Адаптер имплементирует интерфейс генератора и возвращает в код удобное Fio не затрагивая логики исходного класса FioGenerator. Все генераторы теперь возвращают результат по вызову метода buildResponse. Можно было просто переписать немного исходный класс, но я решил чуть-чуть попрактиковаться в реализации.
 * Bridge:      применён - добавил в класс Hair Enum-поле hairLength, что позволило избавиться от лишних классов LongHair, ShortHair, NoneHair.
 * Facade:      применён - добавил в классы генераторов метод getResponse(int code) в котором объединил логику создания параметров и сборку их в ответ (логика была идентичной для каждого из генераторов, что после изменений положительно сказалось на читаемости в классе PersonFactory).
 * DTO:         применён - класс PersonData:  удалось облегчить метод getPerson класса PersonFactory, сделать более читабельной инициализацию объекта класса Person через конструктор - достаточно передать объект PersonData
 * Шаблон:      (не)применён - хотел реализовать для Generator как дефолтный в таком виде:
public T getResponse(int code) {
        generateParams(code);
        return buildResponse();  // возвращает Object
    }
что позволило бы удалить этот метод у всех имплементаторов, но не вышло, пришлось бы делать явное приведение возвращаемого значения в методе getPerson класса PersonFactory для результата действия любого генератора, либо просто не разобрался с дженериками.
 */